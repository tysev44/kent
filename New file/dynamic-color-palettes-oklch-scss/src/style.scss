@use 'sass:list';

:root {
  --surface: #111;

  --chroma-base: var(--chroma-base-input, 0.11);
  --chroma-amplitude: 0.09;

  --md-ref-primary: #fc78fc;
  --md-ref-secondary: #4daef5;
  --md-ref-tertiary: #f6e32c;
  --md-ref-quaternary: cyan;
  --md-ref-error: #de1c0a;

  --md-ref-neutral: var(--md-ref-primary);
  --md-ref-neutral-variant: var(--md-ref-secondary);
  --chroma-base-neutral: 0;
  --chroma-amplitude-neutral: calc(var(--chroma-base) / 1.995);

  --chroma-base-neutral-variant: 0;
  --chroma-amplitude-neutral-variant: calc(var(--chroma-base) / 1.995);

  @each $role in [ "primary", "secondary", "tertiary", "quaternary", "error",
    "neutral", "neutral-variant" ]
  {
    @for $i from 0 through 10 {
      $index: $i * 10;
      $angle: #{($index - 50) * 3.6}deg;
      // ðŸ”¥
      --md-ref-#{$role}-#{$role}#{$index}: oklch(
        from var(--md-ref-#{$role})
          #{$index}%
          calc(
            var(--chroma-base-#{$role}, var(--chroma-base)) +
              var(--chroma-amplitude-#{$role}, var(--chroma-amplitude)) *
              cos(#{$angle})
          )
          h
      );
    }
  }
}

@function colors($role, $count) {
  $result: ();
  @for $i from 0 through $count {
    $percent: $i * 10;
    $nextPercent: ($i + 1) * 10;

    $item: var(--md-ref-#{$role}-#{$role}#{$percent}) calc(#{$percent}%);
    $result: list.append($result, $item, "comma");
    $item: var(--md-ref-#{$role}-#{$role}#{$percent}) calc(#{$nextPercent}%);
    $result: list.append($result, $item, "comma");
  }
  @return $result;
}

.colors {
  container: colors / size;
  border-radius: 20%;
  width: 20cqw;
  aspect-ratio: 1;
  position: relative;

  input[type="color"] {
    -webkit-appearance: none;
    border: none;
  }
  input[type="color"]::-webkit-color-swatch-wrapper {
    padding: 0;
  }
  input[type="color"]::-webkit-color-swatch {
    border: none;
  }

  input {
    position: absolute;
    inset: 30%;
    inline-size: unset;
    block-size: unset;
    z-index: 1;
    border-radius: 20%;
    @media (hover) {
      filter: saturate(0) brightness(0.1);
      transition: filter 0.3s ease;
    }
    background: transparent;
  }

  &:after {
    // content: "";
    position: absolute;
    inset: 20%;
    border-radius: 20%;
    background: var(--c);
    box-shadow: 0 0 0.5rem rgba(0, 0, 0, 0.5);
  }

  @media (hover) {
    &:hover {
      input {
        opacity: 1;
        filter: saturate(1);
      }
    }
  }

  @each $role in [ "primary", "secondary", "tertiary", "quaternary", "error",
    "neutral", "neutral-variant" ]
  {
    &.#{$role} {
      --c: var(--md-ref-#{$role});
      background: conic-gradient(colors(#{$role}, 10));
    }
  }
}
.container {
  display: flex;
  flex-wrap: wrap;
  gap: 2rem;
  place-items: center;
}

body {
  display: grid;
  place-items: center;
  gap: 1rem;
  height: 100dvh;
  background: var(--surface);
  color: white;
}

.main {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2rem;
}
